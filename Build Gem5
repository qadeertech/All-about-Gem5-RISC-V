1. Recommended Setup
This section recommends a development environment setup. The subsequent sections will assume that this setup is used. Please change according to your personal preferences.

1.1 Folder Structure
ðŸ“¦~ (or any working directory)
 â”£ ðŸ“‚gem5
 â”— ðŸ“‚riscv
   â”£ ðŸ“‚bin: RISC-V tool binaries (e.g. GNU-toolchain, QEMU etc.)
   â”£ ðŸ“‚logs: gem5 simulation logs
   â”£ ðŸ“‚out: build outputs (kernel / bootloader / devicetree / disk image)
   â”— ðŸ“‚src
     â”£ ðŸ“‚linux: Linux kernel repo
     â”£ ðŸ“‚pk: RISC-V proxy kernel (bbl bootloader)
     â”£ ðŸ“‚qemu: QEMU emulator
     â”£ ðŸ“‚toolchain: RISC-V GNU toolchain
     â”— ðŸ“‚ucanlinux: UCanLinux disk image
 â”— ðŸ“‚benchmarks
   â”— ðŸ“‚parsec: PARSEC 3.0 benchmark for RISC-V


1.2 Bash Environment

Add these environment variables for easier navigation:

# Add to ~/.bashrc, replace paths if desired
export RISCV=~/riscv
export PATH=$RISCV/bin:$PATH
export G5=~/gem5
export SRC=$RISCV/src
export OUT=$RISCV/out

Setup by running:

mkdir -p $RISCV/bin
mkdir -p $RISCV/out
mkdir -p $RISCV/src

2 Tools and Libraries
2.1 RISC-V GNU Toolchain
The RISC-V GNU Toolchain is used for cross-compiling and debugging RISC-V code.

sudo apt-get install -y autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev
git clone https://github.com/riscv/riscv-gnu-toolchain $SRC/toolchain
cd $SRC/toolchain
./configure --prefix=$RISCV --enable-multilib
make linux -j$(nproc)
# You will need this to compile things like PARSEC and riscv-tests
make newlib -j$(nproc)
If you encounter problems building the RISC-V toolchain (e.g. failure to download riscv-newlib due to proxy), replace url = git://sourceware.org/git/newlib-cygwin.git in .gitmodules with url = ../riscv-newlib

2.2 QEMU
QEMU can be used to quickly verify that binaries / disk images / kernels are valid before running / debugging in gem5.

sudo apt-get install -y git libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev ninja-build
git clone https://git.qemu.org/git/qemu.git $SRC/qemu
cd $SRC/qemu
./configure --target-list=riscv64-softmmu --prefix=$RISCV
make -j$(nproc)
make install

3 gem5 Installation
3.1 Dependencies

sudo apt install -y build-essential git m4 scons zlib1g zlib1g-dev libprotobuf-dev protobuf-compiler libprotoc-dev libgoogle-perftools-dev python3-dev python3-six python-is-python3 libboost-all-dev pkg-config

git clone https://gem5.googlesource.com/public/gem5 $G5

# Uncomment if you want to contribute to gem5
# cd $G5 && git checkout develop

# Uncomment if you have anaconda3 installed (or non-deault python interpreter)
# export PATH=/usr/bin:$PATH

cd $G5 && scons build/RISCV/gem5.opt -j$(nproc)
